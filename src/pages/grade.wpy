<template>
  <view class="grade">
    <view class="header">
      <view wx:if="{{avg!=null}}" class="grade-header">
        <view class="title">
          <view>
            <text>全部成绩</text>
          </view>
          <view>
            <view @tap="updateGrades" class="iconfont icon-update"></view>
          </view>
        </view>
        <view>
          <view class="info">
            <text>必修绩点：{{avg.required.gpa}}</text>
            <text>必修平均分：{{avg.required.grade}}</text>
          </view>
          <view class="info">
            <text>全部绩点：{{avg.all.gpa}}</text>
            <text>全部平均分：{{avg.all.grade}}</text>
          </view>
        </view>
      </view>
      <view @tap="updateGrades" wx:else class="none">
        没有成绩，点击更新！
      </view>
    </view>
    <block wx:for="{{grades}}" wx:key="index">
      <view class="grade-lists">
        <view class="grade-header">
          <text class="title">{{item.grades[0].term_name}}</text>
          <view>
            <view class="info">
              <text>必修绩点：{{item.avg.required.gpa}}</text>
              <text>必修平均分：{{item.avg.required.grade}}</text>
            </view>
            <view class="info">
              <text>全部绩点：{{item.avg.all.gpa}}</text>
              <text>全部平均分：{{item.avg.all.grade}}</text>
            </view>
          </view>
        </view>
        <view class="grade-list">
          <text>课程名</text>
          <text>分数</text>
          <text>绩点</text>
          <text>学分</text>
          <text>属性</text>
        </view>
        <block wx:for="{{item.grades}}" wx:key="{{index}}" wx:for-item="grade">
          <view class="grade-list">
            <text>{{grade.course_name}}</text>
            <text>{{grade.grade}}</text>
            <text>{{grade.gpa}}</text>
            <text>{{grade.credit}}</text>
            <text>{{grade.course_type}}</text>
          </view>
        </block>
      </view>
    </block>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import {GetB, PostB} from '../util/http'
  import gradeUtil from '../util/grade'
  import ModalMixin from '../mixins/modal'
  import Verify from '../mixins/verify'

  export default class Grade extends wepy.page {
    config = {
      navigationBarTitleText: '我的成绩',
      enablePullDownRefresh: true
    };
    mixins = [Verify, ModalMixin];
    data = {
      grades: null,
      avg: null
    }
    calAllGrades() {
      let sum = {
        all: {
          grade: 0,
          credit: 0,
          gpa: 0
        },
        required: {
          grade: 0,
          credit: 0,
          gpa: 0
        }
      }
      let avg = {
        all: {
          grade: 0,
          gpa: 0
        },
        required: {
          grade: 0,
          gpa: 0
        }
      }
      this.grades.forEach(g => {
        sum.all.grade += g.sum.all.grade
        sum.all.credit += g.sum.all.credit
        sum.all.gpa += g.sum.all.gpa
        sum.required.grade += g.sum.required.grade
        sum.required.credit += g.sum.required.credit
        sum.required.gpa += g.sum.required.gpa
      })
      avg.all.gpa = (sum.all.gpa / sum.all.credit).toFixed(3)
      avg.all.grade = (sum.all.grade / sum.all.credit).toFixed(3)
      avg.required.gpa = (sum.required.gpa / sum.required.credit).toFixed(3)
      avg.required.grade = (sum.required.grade / sum.required.credit).toFixed(3)
      this.avg = avg
      this.$apply()
    }
    methods = {
      updateGrades() {
        this.updateGrade()
      }
    }
    async updateGrade() {
      const resp = await PostB('/user/grade')
      if (resp.status === 0) {
        let grades = []
        resp.data.forEach(e => {
          if (!grades[e.term]) {
            grades[e.term] = []
          }
          grades[e.term].push(e)
        })
        grades = gradeUtil.cal(grades)
        grades = grades.reverse()
        this.grades = grades
        this.calAllGrades()
        this.$apply()
      } else {
        this.Alert(resp.msg)
      }
      wepy.stopPullDownRefresh()
    }

    onPullDownRefresh() {
      this.updateGrade()
    }

    async getGrades() {
      const resp = await GetB('/user/grade')
      if (resp.status === 0) {
        let grades = []
        resp.data.forEach(e => {
          if (!grades[e.term]) {
            grades[e.term] = []
          }
          grades[e.term].push(e)
        })
        grades = gradeUtil.cal(grades)
        grades = grades.reverse()
        this.grades = grades
        this.calAllGrades()
        this.$apply()
      } else {
        this.Alert(resp.msg)
      }
    }

    onLoad() {
      // 获取本地缓存的成绩
      // let grades = wepy.wx.getStorageSync("grades")
      // if (!grades){
      //     // 本地缓存没有成绩，从服务器拉取
      // }
      if (this.verify()) {
        this.getGrades()
      }
    }
  }
</script>
<style lang="less">
  @import "./src/icon/iconfont.less";
  @import "./src/less/config.less";

  page {
    background: #eee;
  }

  .grade {
    margin: 0.5rem;
  }

  .header {
    .none {
      text-align: center;
      background: #fff;
    }
    .grade-header {
      border-radius: 0.2rem;
      .title {
        display: flex;
        justify-content: space-between;
      }
    }
  }

  .grade-header {
    margin-top: 0.5rem;
    background: @base-color;
    color: #fff;
    text-align: center;
    padding: 0.5rem;
    .title {
      display: block;
    }
    .info {
      font-size: 0.7rem;
      display: flex;
      justify-content: space-between;
      padding-top: 0.5rem;
    }
  }

  .grade-lists {
    background: #fff;
    border-radius: 0.2rem;
    display: block;
    .grade-list {
      display: flex;
      border-bottom: 1px dashed #eee;
      color: #666;
      font-size: 0.8rem;
      padding: 0.2rem 0.5rem;
      text {
        padding: 0.1rem;
        display: table-cell;
        flex: 1;
        &:nth-child(1) {
          flex: 4;
        }
      }
    }
  }
</style>
