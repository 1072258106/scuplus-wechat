<style lang="less">
  page {
    background: #eee;
    width: 100%;
    height: 100%;
  }

  @import url("../../less/config");
  .book {
    color: #333;
    margin: 0.5rem 0.5rem 0rem 0.5rem;
    background: @white;
    border-radius: 0.1rem;
    padding: 0.5rem;
    display: flex;
    align-content: space-between;
    flex-wrap: wrap;
    > view {
      width: 100%;
    }
    .info {
      margin-top: 1rem;
      justify-content: space-between;
      align-items: center;
      display: flex;
      color: #666;
      font-size: 0.8rem;
    }
    .warn {
      color: @base-color;
    }
  }

  .none {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    color: #888;
    font-size: 2rem;
    text-align: center;
  }
</style>

<template>
  <view wx:if="{{loan_books.length!=0}}">
    <block wx:for="{{loan_books}}" wx:key="{{index}}">
      <view class="book">
        <view class="title">{{item.title}}-{{item.author}}</view>
        <view class="info">
          <view>到期: {{item.due_date}}</view>
          <view wx:if="{{item.arrearage>0}}" class="warn">欠费: {{item.arrearage}}</view>
          <view wx:if="{{loan_type=='now'}}" class="btn warn" @tap="loan({{item.book_id}})">续借</view>
          <view wx:if="{{loan_type=='history'}}">归还: {{item.return_date}}</view>
        </view>
      </view>
    </block>
  </view>
  <view wx:else class="none">
    暂无借阅，下拉刷新
  </view>
</template>

<script>
  import wepy from 'wepy'
  import {PostB, GetB} from '../../util/http'
  import Verify from '../../mixins/verify'

  export default class Loan extends wepy.page {
    config = {
      navigationBarTitleText: '我的借阅',
      enablePullDownRefresh: true
    };
    mixins = [Verify]
    data = {
      loan_books: [],
      loan_type: 'now' // history
    };
    methods = {
      async loan(bookID) {
        const resp = await PostB('/library/loan', {book_id: bookID})
        if (resp.status === 0) {
          this.getBooks()
          this.Alert('续借成功')
        } else {
          this.Alert(resp.msg)
        }
      }
    }

    async getBooks() {
      const t = this.loan_type === 'now' ? 0 : 1
      const resp = await GetB('/library/books?is_history=' + t)
      if (resp.status === 0) {
        this.loan_books = resp.data
        this.$apply()
        wepy.setStorage({
          key: 'loan_' + this.loan_type,
          data: resp.data
        })
      } else {
        this.Alert(resp.msg)
      }
    }

    onPullDownRefresh() {
      this.getBooks()
    }

    onLoad(options) {
      if (options.type && options.type === 'history') {
        this.loan_type = options.type
        wepy.setNavigationBarTitle({
          title: '历史借阅'
        })
      }
      this.loan_books = wepy.getStorageSync('loan_' + this.loan_type)
      if (this.loan_books.length === 0) {
        this.getBooks()
      }
    }
  }
</script>
